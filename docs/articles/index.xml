<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Jeannory&#39;s blog</title>
    <link>https://jeannory.github.io/blog/articles/</link>
    <description>Recent content in Articles on Jeannory&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Oct 2020 09:05:35 +0100</lastBuildDate>
    
	<atom:link href="https://jeannory.github.io/blog/articles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Cloud Part 1</title>
      <link>https://jeannory.github.io/blog/articles/micro-service/spring-cloud-part-1/</link>
      <pubDate>Fri, 30 Oct 2020 09:05:35 +0100</pubDate>
      
      <guid>https://jeannory.github.io/blog/articles/micro-service/spring-cloud-part-1/</guid>
      <description>Micro-service Spring Cloud part 1 Le projet Etat actuel  Objectif  Dépôts
 configuration-service : ici configuration : ici registartion-service : ici user-service : ici spam-service : ici front-end-server : ici  Configuration-service Configuration service va servir à mapper les fichiers de configurations vers les services. Les fichiers de configurations sont centralisés dans un dépôt git ici. Par exemple, un fichier de configuration peut contenir le port de déployement, les différents profils, les connecteurs de la base de données, du serveur d&amp;rsquo;authentification, etc&amp;hellip;</description>
    </item>
    
    <item>
      <title>Jms Websocket</title>
      <link>https://jeannory.github.io/blog/articles/jms-websocket/</link>
      <pubDate>Thu, 30 Jul 2020 14:43:41 +0200</pubDate>
      
      <guid>https://jeannory.github.io/blog/articles/jms-websocket/</guid>
      <description>Introduction MAJ au 10/10/2020.
Dans ce chapitre nous allons aborder la communication asynchrone entre micro-services à travers le développement de composants.
Stack technique
 VM Google Cloud Plateform Message oriented middleware activeMQ Back-end Java/Springboot Module Java/SpringBoot Serveur d&amp;rsquo;authentification keycloak Front-end Angular Material  User storie 1 Given:
 Je peux cliquer sur le bouton &amp;ldquo;spam les managers&amp;rdquo;  When:
 L&amp;rsquo;utilisateur n&amp;rsquo;est pas connecté  Then:
 Incrémentation du nombre de spams des utilisateurs non connectés  And:</description>
    </item>
    
    <item>
      <title>Gitlab Ci Cd</title>
      <link>https://jeannory.github.io/blog/articles/gitlab-ci-cd/</link>
      <pubDate>Sun, 26 Apr 2020 16:20:53 +0200</pubDate>
      
      <guid>https://jeannory.github.io/blog/articles/gitlab-ci-cd/</guid>
      <description>Introduction Gitlab fournit un ensemble de services complet pour l&amp;rsquo;intégration et le déploiement continue. Il est nécessaire de créer et de renseigner le fichier .gitlab-ci.yml à la racine du projet, pour qu&amp;rsquo;à chaque commit sur une branche cible, Gitlab exécute les tâches (stages).
Exemple d&amp;rsquo;utilisation avec le projet full stack de Keycloak pour la réalisation des différentes étapes CI/CD.
Dépôts Gitlab  Back-end  Back-end - Gitlab-CI L&amp;rsquo;intégration continue permet à chaque commit de tester le build du projet, l&amp;rsquo;exécution des tests, les affichages de différents rapports (qualité de code et couverture des tests) et l&amp;rsquo;archivage des différents artifacts.</description>
    </item>
    
    <item>
      <title>Keycloak</title>
      <link>https://jeannory.github.io/blog/articles/keycloak/</link>
      <pubDate>Thu, 23 Apr 2020 19:40:34 +0200</pubDate>
      
      <guid>https://jeannory.github.io/blog/articles/keycloak/</guid>
      <description>Introduction MAJ au 16/07/2020
Keycloak est serveur d&amp;rsquo;authentification standalone. Il est reconnu pour la protection qu&amp;rsquo;il propose en termes de cyber sécurité et aussi par les très nombreuses librairies/fonctionnalités qui permettent une utilisation étendue (Java, AngularJs, Typescript, Ldap, etc..). Beaucoup d&amp;rsquo;entreprises lui font confiance et lui délèguent la partie authentification/autorisation. C&amp;rsquo;est un projet open source codé en java, qui fait preuve d&amp;rsquo;une grande maturité (version 9 à ce jour).</description>
    </item>
    
    <item>
      <title>Springboot-tests</title>
      <link>https://jeannory.github.io/blog/articles/springboot-tests/</link>
      <pubDate>Fri, 25 Oct 2019 15:02:42 +0200</pubDate>
      
      <guid>https://jeannory.github.io/blog/articles/springboot-tests/</guid>
      <description>Introduction Springboot-tests : Type de tests avec Springboot
 Tests de persistence - DataJpaTest Tests unitaires - Mockito Tests de controleurs - In-Container  Fonctionalitées du projet :
 Enregistrement/Modification utilisateur Authentification Gestion des rôles implémentation de Spring Security/Jwt.  Présentation de l&amp;rsquo;implémentation de Spring Security/Jwt : ici
Stack technique
 Java 8 Springboot 2 Spring Security Jwt Postgresql Junit 4 Mockito 1.9 H2  Dépôt git du projet back-end : ici</description>
    </item>
    
    <item>
      <title>Spring Security</title>
      <link>https://jeannory.github.io/blog/articles/spring-security/</link>
      <pubDate>Mon, 07 Oct 2019 23:47:25 +0200</pubDate>
      
      <guid>https://jeannory.github.io/blog/articles/spring-security/</guid>
      <description>Introduction Initiation à Spring Security/Jwt en développant une application full-stack respectant les prérequis en terme de cybersécurité.
Article du 23/08/2019 importé en markdown pour Hugo au 08/10/2019.
MAJ au 12/10/2019 - ajout de la fonction refresh token
Dépôts github :
 Back-end : ici Front-end : ici  Protéger son application avec SpringBoot, Angular et Jwt Développer une application full stack en respectant les règles en terme de cyber sécurité.</description>
    </item>
    
  </channel>
</rss>