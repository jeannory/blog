<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>6/Micro Services Spring Cloud Part 2 on Jeannory&#39;s blog</title>
    <link>https://jeannory.github.io/blog/tags/6/micro-services-spring-cloud-part-2/</link>
    <description>Recent content in 6/Micro Services Spring Cloud Part 2 on Jeannory&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Jan 2021 21:18:30 +0100</lastBuildDate>
    
	<atom:link href="https://jeannory.github.io/blog/tags/6/micro-services-spring-cloud-part-2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Cloud Part 2</title>
      <link>https://jeannory.github.io/blog/articles/micro-service/spring-cloud-part-2/</link>
      <pubDate>Wed, 06 Jan 2021 21:18:30 +0100</pubDate>
      
      <guid>https://jeannory.github.io/blog/articles/micro-service/spring-cloud-part-2/</guid>
      <description>Micro-service Spring Cloud part 2 Article en cours de rédaction&amp;hellip;
Introduction A travers cet article, nous allons aborder un moyen pour réaliser des échanges entre 2 micro-services, tout en assurant la sécurisation des transactions. Nous allons expliquer les patterns choreography-based saga et oubox. Je vous mettrais un exemple d’implémentation avec le code source à travers un cas métier concret.
Dépôts git  user-service : ici order-service : ici  Les fonctions ont été développées sous la branch &amp;ldquo;dev/add-order-service&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>