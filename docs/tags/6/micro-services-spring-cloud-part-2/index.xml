<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>6/Micro Services Spring Cloud Part 2 on Jeannory&#39;s blog</title>
    <link>https://jeannory.github.io/blog/tags/6/micro-services-spring-cloud-part-2/</link>
    <description>Recent content in 6/Micro Services Spring Cloud Part 2 on Jeannory&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Jan 2021 21:18:30 +0100</lastBuildDate>
    
	<atom:link href="https://jeannory.github.io/blog/tags/6/micro-services-spring-cloud-part-2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Cloud Part 2</title>
      <link>https://jeannory.github.io/blog/articles/micro-service/spring-cloud-part-2/</link>
      <pubDate>Wed, 06 Jan 2021 21:18:30 +0100</pubDate>
      
      <guid>https://jeannory.github.io/blog/articles/micro-service/spring-cloud-part-2/</guid>
      <description>Micro-service Spring Cloud part 2 Nous allons désormais faire communiquer 2 services à travers un exemple très simple.
Pour ce faire nous allons utiliser implémenter &amp;ldquo;choreography-based saga&amp;rdquo; tel que définit ici. Nous allons utiliser la même fonction dans notre projet micro service.
   Step Triggering event Participan Command Events     1  Order Service createPendingOrder() OrderCreated   2 OrderCreated Customer Service reserveCredit() Credit Reserved, Credit Limit Exceeded   3a Credit Reserved Order Service approveOrder()    3b Credit Limit Exceeded Order Service rejectOrder()     Voici comment les services vont communiquer entre eux par cette implémentation:</description>
    </item>
    
  </channel>
</rss>